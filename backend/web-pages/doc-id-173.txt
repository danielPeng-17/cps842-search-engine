 * Skip to main content
 * Skip to search
 * Skip to select language

/en-US/
 * Technologies
   * Technologies Overview [/en-US/docs/Web]
   * HTML [/en-US/docs/Web/HTML]
   * CSS [/en-US/docs/Web/CSS]
   * JavaScript [/en-US/docs/Web/JavaScript]
   * Graphics [/en-US/docs/Web/Guide/Graphics]
   * HTTP [/en-US/docs/Web/HTTP]
   * APIs [/en-US/docs/Web/API]
   * Browser Extensions [/en-US/docs/Mozilla/Add-ons/WebExtensions]
   * MathML [/en-US/docs/Web/MathML]
 * References & Guides
   * Learn web development [/en-US/docs/Learn]
   * Tutorials [/en-US/docs/Web/Tutorials]
   * References [/en-US/docs/Web/Reference]
   * Developer Guides [/en-US/docs/Web/Guide]
   * Accessibility [/en-US/docs/Web/Accessibility]
   * Game development [/en-US/docs/Games]
   * ...more docs [/en-US/docs/Web]
 * Feedback
   * Send Feedback [/en-US/docs/MDN/Contribute/Feedback]
   * Contribute to MDN [/en-US/docs/MDN/Contribute]
   * Report a content issue üåê [https://github.com/mdn/content/issues/new]
   * Report a platform issue üåê [https://github.com/mdn/yari/issues/new]

Search MDN

 * Change language


TABLE OF CONTENTS

Table of contents
 * What's new?
 * Where to start
 * Topics covered
 * Getting our code examples
 * Contact us
 * See also


LEARN WEB DEVELOPMENT

Welcome to the MDN learning area. This set of articles aims to guide complete beginners to web development with all that they need to start coding
websites.

The aim of this area of MDN is not to take you from "beginner" to "expert" but to take you from "beginner" to "comfortable." From there, you should be
able to start making your way, learning from the rest of MDN [/en-US/], and other intermediate to advanced resources that assume a lot of previous
knowledge.

If you are a complete beginner, web development can be challenging ‚Äî we will hold your hand and provide enough detail for you to feel comfortable and
learn the topics properly. You should feel at home whether you are a student learning web development (on your own or as part of a class), a teacher
looking for class materials, a hobbyist, or someone who just wants to understand more about how web technologies work.


WHAT'S NEW?

The content in the learning area is being added to regularly. We have started keeping Learning area release notes [/en-US/docs/Learn/Release_notes] to
show what has changed ‚Äî keep checking back frequently!

If you have questions regarding topics you'd like to see covered or feel are missing, drop us a message on our Discourse forum
[https://discourse.mozilla.org/c/mdn].

LOOKING TO BECOME A FRONT-END WEB DEVELOPER?

We have put together a course that includes all the essential information you need to work towards your goal.

Get started [/en-US/docs/Learn/Front-end_web_developer]


WHERE TO START

Complete beginner

If you are a complete beginner to web development, we'd recommend that you start by working through our Getting started with the web
[/en-US/docs/Learn/Getting_started_with_the_web] module, which provides a practical introduction to web development.

Beyond the basics

If you have a bit of knowledge already, the next step is to learn HTML [/en-US/docs/Glossary/HTML] and CSS [/en-US/docs/Glossary/CSS] in detail: start
with our Introduction to HTML [/en-US/docs/Learn/HTML/Introduction_to_HTML] module and move on to our CSS first steps
[/en-US/docs/Learn/CSS/First_steps] module.

Moving onto scripting

If you are comfortable with HTML and CSS already, or you are mainly interested in coding, you'll want to move on to JavaScript
[/en-US/docs/Glossary/JavaScript] or server-side development. Begin with our JavaScript first steps [/en-US/docs/Learn/JavaScript/First_steps] and
Server-side first steps [/en-US/docs/Learn/Server-side/First_steps] modules.

Frameworks and tooling

After mastering the essentials of vanilla HTML, CSS, and JavaScript, you should learn about client-side web development tools
[/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools], and then consider digging into client-side JavaScript frameworks
[/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks], and server-side website programming [/en-US/docs/Learn/Server-side].

Note: Our glossary [/en-US/docs/Glossary] provides terminology definitions. Besides, if you have a specific question about web development, our Common
questions [/en-US/docs/Learn/Common_questions] section may have something to help you.

Random glossary entry

OWASP [/en-US/docs/Glossary/OWASP] OWASP¬†(Open Web Application Security Project) is a non-profit organization and worldwide network that works for
security in Free Software, especially on the Web.


TOPICS COVERED

The following is a list of all the topics we cover in the MDN learning area.

Getting started with the web [/en-US/docs/Learn/Getting_started_with_the_web]

Provides a practical introduction to web development for complete beginners.

HTML ‚Äî Structuring the web [/en-US/docs/Learn/HTML]

HTML is the language that we use to structure the different parts of our content and define what their meaning or purpose is. This topic teaches HTML
in detail.

CSS ‚Äî Styling the web [/en-US/docs/Learn/CSS]

CSS is the language that we can use to style and layout our web content, as well as adding behavior like animation. This topic provides comprehensive
coverage of CSS.

JavaScript ‚Äî Dynamic client-side scripting [/en-US/docs/Learn/JavaScript]

JavaScript is the scripting language used to add dynamic functionality to web pages. This topic teaches all the essentials needed to become
comfortable with writing and understanding JavaScript.

Web forms ‚Äî Working with user data [/en-US/docs/Learn/Forms]

Web forms are a potent tool for interacting with users ‚Äî most commonly, they are used for collecting data from users, or allowing them to control a
user interface. In the articles listed below, we'll cover all the essential aspects of structuring, styling, and interacting with web forms.

Accessibility ‚Äî make the web usable by everyone [/en-US/docs/Learn/Accessibility]

Accessibility is the practice of making web content available to as many people as possible regardless of disability, device, locale, or other
differentiating factors. This topic gives you all you need to know.

Web Performance ‚Äî making websites fast and responsive [/en-US/docs/Learn/Performance]

Web performance is the art of making sure web applications download fast and are responsive to user interaction, regardless of a user's bandwidth,
screen size, network, or device capabilities.

Tools and testing [/en-US/docs/Learn/Tools_and_testing]

This topic covers the tools developers use to facilitate their work, such as cross-browser testing tools, linters, formatters, transformation tools,
version control systems, deployment tools, and client-side JavaScript frameworks.

Server-side website programming [/en-US/docs/Learn/Server-side]

Even if you are concentrating on client-side web development, it is still useful to know how servers and server-side code features work. This topic
provides a general introduction to how the server-side works and detailed tutorials showing how to build up a server-side app using two popular
frameworks: Django (Python) and Express (Node.js).


GETTING OUR CODE EXAMPLES

The code examples you'll encounter in the Learning Area are all available on GitHub [https://github.com/mdn/learning-area/]. If you want to copy them
all to your computer, the easiest way is to download a ZIP of the latest master code branch [https://github.com/mdn/learning-area/archive/master.zip].

If you prefer to copy the repo in a more flexible way that allows for automatic updates, you can follow the more complex instructions:

 1. Install Git [https://git-scm.com/downloads] on your machine. This is the underlying version control system software that GitHub works on top of.
 2. Open your computer's command prompt [https://www.lifewire.com/how-to-open-command-prompt-2618089] (Windows) or terminal (Linux
    [https://help.ubuntu.com/community/UsingTheTerminal], macOS [https://blog.teamtreehouse.com/introduction-to-the-mac-os-x-command-line]).
 3. To copy the learning area repo to a folder called learning-area in the current location your command prompt/terminal is pointing to, use the
    following command:
    
    git clone https://github.com/mdn/learning-area
    

 4. You can now enter the directory and find the files you are after (either using your Finder/File Explorer or the cd command
    [https://en.wikipedia.org/wiki/Cd_(command)]).

You can update the learning-area repository with any changes made to the master version on GitHub with the following steps:

 1. In your command prompt/terminal, go inside the learning-area directory using cd. For example, if you were in the parent directory:
    
    cd learning-area
    

 2. Update the repository using the following command:
    
    git pull
    


CONTACT US

If you want to get in touch with us about anything, the best way is to drop us a message on our Discourse forum [https://discourse.mozilla.org/c/mdn].
We'd like to hear from you about anything you think is wrong or missing on the site, requests for new learning topics, requests for help with items
you don't understand, or any other questions or concerns.

If you're interested in helping develop/improve the content, take a look at how you can help [/en-US/docs/MDN/Contribute] and get in touch! We are
more than happy to talk to you, whether you are a learner, teacher, experienced web developer, or someone else interested in helping to improve the
learning experience.


SEE ALSO

Mozilla developer newsletter [https://www.mozilla.org/en-US/newsletter/developer/]

Our newsletter for web developers, which is an excellent resource for all levels of experience.

Learn JavaScript [https://learnjavascript.online/]

An excellent resource for aspiring web developers ‚Äî Learn JavaScript in an interactive environment, with short lessons and interactive tests, guided
by automated assessment. The first 40 lessons are free, and the complete course is available for a small one-time payment.

Web demystified [https://www.youtube.com/playlist?list=PLo3w8EB99pqLEopnunz-dOOBJ8t-Wgt2g]

A great series of videos explaining web fundamentals, aimed at absolute beginners to web development. Created by J√©r√©mie Patonnier
[https://twitter.com/JeremiePat].

Codecademy [https://www.codecademy.com/]

A great interactive site for learning programming languages from scratch.

BitDegree [https://www.bitdegree.org/learn/]

Basic coding theory with a gamified learning process. Mainly focused on beginners.

Code.org [https://code.org/]

Basic coding theory and practice, primarily aimed at children/complete beginners.

EXLskills [https://exlskills.com/learn-en/courses]

Free and open courses for learning tech skills, with mentorship and project-based learning.

freeCodeCamp.org [https://www.freecodecamp.org/]

Interactive site with tutorials and projects to learn web development.

Web literacy map [https://foundation.mozilla.org/en/initiatives/web-literacy/core-curriculum/]

A framework for entry-level web literacy and 21st-century skills, which also provides access to teaching activities sorted by category.

Edabit [https://edabit.com/challenges/javascript]

Thousands of interactive JavaScript challenges.


FOUND A PROBLEM WITH THIS PAGE?

 * Edit on GitHub [https://github.com/mdn/content/edit/main/files/en-us/learn/index.md]
 * Source on GitHub [https://github.com/mdn/content/blob/main/files/en-us/learn/index.md]
 * Report a problem with this content on GitHub
   [https://github.com/mdn/content/issues/new?body=MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%0A%0A%23%23%23%23+What+information+was+incorrect%2C+unhelpful%2C+or+incomplete%3F%0A%0A%0A%23%23%23%23+Specific+section+or+headline%3F%0A%0A%0A%23%23%23%23+What+did+you+expect+to+see%3F%0A%0A%0A%23%23%23%23+Did+you+test+this%3F+If+so%2C+how%3F%0A%0A%0A%3C%21--+Do+not+make+changes+below+this+line+--%3E%0A%3Cdetails%3E%0A%3Csummary%3EMDN+Content+page+report+details%3C%2Fsummary%3E%0A%0A*+Folder%3A+%60en-us%2Flearn%60%0A*+MDN+URL%3A+https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FLearn%0A*+GitHub+URL%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fblob%2Fmain%2Ffiles%2Fen-us%2Flearn%2Findex.md%0A*+Last+commit%3A+https%3A%2F%2Fgithub.com%2Fmdn%2Fcontent%2Fcommit%2F07453ac2b659a397b0fee921fa71db5488e9ca62%0A*+Document+last+modified%3A+2021-10-08T14%3A43%3A33.000Z%0A%0A%3C%2Fdetails%3E&title=Issue+with+%22Learn+web+development%22%3A+%28short+summary+here+please%29&labels=needs-triage%2CContent%3ALearn]
 * Want to fix the problem yourself? See our Contribution guide [https://github.com/mdn/content/blob/main/README.md].

Last modified: Oct 8, 2021, by MDN contributors [/en-US/docs/Learn/contributors.txt]

Change your languageSelect your preferred language English (US)DeutschEspa√±olFran√ßaisÊó•Êú¨Ë™ûÌïúÍµ≠Ïñ¥PolskiPortugu√™s (do¬†Brasil)–†—É—Å—Å–∫–∏–π‰∏≠Êñá (ÁÆÄ‰Ωì)Ê≠£È´î‰∏≠Êñá (ÁπÅÈ´î) Change
language

RELATED TOPICS

 1.  Complete beginners start here! [/en-US/docs/Learn/Getting_started_with_the_web]
 2.  Getting started with the Web
      1. Getting started with the Web overview [/en-US/docs/Learn/Getting_started_with_the_web]
      2. Installing basic software [/en-US/docs/Learn/Getting_started_with_the_web/Installing_basic_software]
      3. What will your website look like? [/en-US/docs/Learn/Getting_started_with_the_web/What_will_your_website_look_like]
      4. Dealing with files [/en-US/docs/Learn/Getting_started_with_the_web/Dealing_with_files]
      5. HTML basics [/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics]
      6. CSS basics [/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics]
      7. JavaScript basics [/en-US/docs/Learn/Getting_started_with_the_web/JavaScript_basics]
      8. Publishing your website [/en-US/docs/Learn/Getting_started_with_the_web/Publishing_your_website]
      9. How the Web works [/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works]

 3.  HTML ‚Äî Structuring the Web [/en-US/docs/Learn/HTML]
 4.  Introduction to HTML
      1.  Introduction to HTML overview [/en-US/docs/Learn/HTML/Introduction_to_HTML]
      2.  Getting started with HTML [/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started]
      3.  What's in the head? Metadata in HTML [/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML]
      4.  HTML text fundamentals [/en-US/docs/Learn/HTML/Introduction_to_HTML/HTML_text_fundamentals]
      5.  Creating hyperlinks [/en-US/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks]
      6.  Advanced text formatting [/en-US/docs/Learn/HTML/Introduction_to_HTML/Advanced_text_formatting]
      7.  Document and website structure [/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure]
      8.  Debugging HTML [/en-US/docs/Learn/HTML/Introduction_to_HTML/Debugging_HTML]
      9.  Assessment: Marking up a letter [/en-US/docs/Learn/HTML/Introduction_to_HTML/Marking_up_a_letter]
      10. Assessment: Structuring a page of content [/en-US/docs/Learn/HTML/Introduction_to_HTML/Structuring_a_page_of_content]

 5.  Multimedia and embedding
      1. Multimedia and embedding overview [/en-US/docs/Learn/HTML/Multimedia_and_embedding]
      2. Images in HTML [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Images_in_HTML]
      3. Video and audio content [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Video_and_audio_content]
      4. From object to iframe ‚Äî other embedding technologies [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Other_embedding_technologies]
      5. Adding vector graphics to the Web [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Adding_vector_graphics_to_the_Web]
      6. Responsive images [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images]
      7. Assessment: Mozilla splash page [/en-US/docs/Learn/HTML/Multimedia_and_embedding/Mozilla_splash_page]

 6.  HTML tables
      1. HTML tables overview [/en-US/docs/Learn/HTML/Tables]
      2. HTML table basics [/en-US/docs/Learn/HTML/Tables/Basics]
      3. HTML Table advanced features and accessibility [/en-US/docs/Learn/HTML/Tables/Advanced]
      4. Assessment: Structuring planet data [/en-US/docs/Learn/HTML/Tables/Structuring_planet_data]

 7.  CSS ‚Äî Styling the Web [/en-US/docs/Learn/CSS]
 8.  CSS first steps
      1. CSS first steps overview [/en-US/docs/Learn/CSS/First_steps]
      2. What is CSS? [/en-US/docs/Learn/CSS/First_steps/What_is_CSS]
      3. Getting started with CSS [/en-US/docs/Learn/CSS/First_steps/Getting_started]
      4. How CSS is structured [/en-US/docs/Learn/CSS/First_steps/How_CSS_is_structured]
      5. How CSS works [/en-US/docs/Learn/CSS/First_steps/How_CSS_works]
      6. Using your new knowledge [/en-US/docs/Learn/CSS/First_steps/Using_your_new_knowledge]

 9.  CSS building blocks
      1.  CSS building blocks overview [/en-US/docs/Learn/CSS/Building_blocks]
      2.  Cascade and inheritance [/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance]
      3.  CSS selectors [/en-US/docs/Learn/CSS/Building_blocks/Selectors]
      4.  The box model [/en-US/docs/Learn/CSS/Building_blocks/The_box_model]
      5.  Backgrounds and borders [/en-US/docs/Learn/CSS/Building_blocks/Backgrounds_and_borders]
      6.  Handling different text directions [/en-US/docs/Learn/CSS/Building_blocks/Handling_different_text_directions]
      7.  Overflowing content [/en-US/docs/Learn/CSS/Building_blocks/Overflowing_content]
      8.  Values and units [/en-US/docs/Learn/CSS/Building_blocks/Values_and_units]
      9.  Sizing items in CSS [/en-US/docs/Learn/CSS/Building_blocks/Sizing_items_in_CSS]
      10. Images, media, and form elements [/en-US/docs/Learn/CSS/Building_blocks/Images_media_form_elements]
      11. Styling tables [/en-US/docs/Learn/CSS/Building_blocks/Styling_tables]
      12. Debugging CSS [/en-US/docs/Learn/CSS/Building_blocks/Debugging_CSS]
      13. Organizing your CSS [/en-US/docs/Learn/CSS/Building_blocks/Organizing]

 10. Styling text
      1. Styling text overview [/en-US/docs/Learn/CSS/Styling_text]
      2. Fundamental text and font styling [/en-US/docs/Learn/CSS/Styling_text/Fundamentals]
      3. Styling lists [/en-US/docs/Learn/CSS/Styling_text/Styling_lists]
      4. Styling links [/en-US/docs/Learn/CSS/Styling_text/Styling_links]
      5. Web fonts [/en-US/docs/Learn/CSS/Styling_text/Web_fonts]
      6. Assessment: Typesetting a community school homepage [/en-US/docs/Learn/CSS/Styling_text/Typesetting_a_homepage]

 11. CSS layout
      1.  CSS layout overview [/en-US/docs/Learn/CSS/CSS_layout]
      2.  Introduction to CSS layout [/en-US/docs/Learn/CSS/CSS_layout/Introduction]
      3.  Normal Flow [/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow]
      4.  Flexbox [/en-US/docs/Learn/CSS/CSS_layout/Flexbox]
      5.  Grids [/en-US/docs/Learn/CSS/CSS_layout/Grids]
      6.  Floats [/en-US/docs/Learn/CSS/CSS_layout/Floats]
      7.  Positioning [/en-US/docs/Learn/CSS/CSS_layout/Positioning]
      8.  Multiple-column Layout [/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout]
      9.  Responsive design [/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design]
      10. Beginner's guide to media queries [/en-US/docs/Learn/CSS/CSS_layout/Media_queries]
      11. Legacy Layout Methods [/en-US/docs/Learn/CSS/CSS_layout/Legacy_Layout_Methods]
      12. Supporting Older Browsers [/en-US/docs/Learn/CSS/CSS_layout/Supporting_Older_Browsers]
      13. Fundamental Layout Comprehension [/en-US/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension]

 12. JavaScript ‚Äî Dynamic client-side scripting [/en-US/docs/Learn/JavaScript]
 13. JavaScript first steps
      1.  JavaScript first steps overview [/en-US/docs/Learn/JavaScript/First_steps]
      2.  What is JavaScript? [/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript]
      3.  A first splash into JavaScript [/en-US/docs/Learn/JavaScript/First_steps/A_first_splash]
      4.  What went wrong? Troubleshooting JavaScript [/en-US/docs/Learn/JavaScript/First_steps/What_went_wrong]
      5.  Storing the information you need ‚Äî Variables [/en-US/docs/Learn/JavaScript/First_steps/Variables]
      6.  Basic math in JavaScript ‚Äî Numbers and operators [/en-US/docs/Learn/JavaScript/First_steps/Math]
      7.  Handling text ‚Äî Strings in JavaScript [/en-US/docs/Learn/JavaScript/First_steps/Strings]
      8.  Useful string methods [/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods]
      9.  Arrays [/en-US/docs/Learn/JavaScript/First_steps/Arrays]
      10. Assessment: Silly story generator [/en-US/docs/Learn/JavaScript/First_steps/Silly_story_generator]

 14. JavaScript building blocks
      1. JavaScript building blocks overview [/en-US/docs/Learn/JavaScript/Building_blocks]
      2. Making decisions in your code ‚Äî Conditionals [/en-US/docs/Learn/JavaScript/Building_blocks/conditionals]
      3. Looping code [/en-US/docs/Learn/JavaScript/Building_blocks/Looping_code]
      4. Functions ‚Äî Reusable blocks of code [/en-US/docs/Learn/JavaScript/Building_blocks/Functions]
      5. Build your own function [/en-US/docs/Learn/JavaScript/Building_blocks/Build_your_own_function]
      6. Function return values [/en-US/docs/Learn/JavaScript/Building_blocks/Return_values]
      7. Introduction to events [/en-US/docs/Learn/JavaScript/Building_blocks/Events]
      8. Assessment: Image gallery [/en-US/docs/Learn/JavaScript/Building_blocks/Image_gallery]

 15. Introducing JavaScript objects
      1. Introducing JavaScript objects overview [/en-US/docs/Learn/JavaScript/Objects]
      2. Object basics [/en-US/docs/Learn/JavaScript/Objects/Basics]
      3. Object-oriented JavaScript for beginners [/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS]
      4. Object prototypes [/en-US/docs/Learn/JavaScript/Objects/Object_prototypes]
      5. Inheritance in JavaScript [/en-US/docs/Learn/JavaScript/Objects/Inheritance]
      6. Working with JSON data [/en-US/docs/Learn/JavaScript/Objects/JSON]
      7. Object building practice [/en-US/docs/Learn/JavaScript/Objects/Object_building_practice]
      8. Assessment: Adding features to our bouncing balls demo [/en-US/docs/Learn/JavaScript/Objects/Adding_bouncing_balls_features]

 16. Asynchronous JavaScript
      1. Asynchronous JavaScript overview [/en-US/docs/Learn/JavaScript/Asynchronous]
      2. General asynchronous programming concepts [/en-US/docs/Learn/JavaScript/Asynchronous/Concepts]
      3. Introducing asynchronous JavaScript [/en-US/docs/Learn/JavaScript/Asynchronous/Introducing]
      4. Cooperative asynchronous Java Script: Timeouts and intervals [/en-US/docs/Learn/JavaScript/Asynchronous/Timeouts_and_intervals]
      5. Graceful asynchronous programming with Promises [/en-US/docs/Learn/JavaScript/Asynchronous/Promises]
      6. Making asynchronous programming easier with async and await [/en-US/docs/Learn/JavaScript/Asynchronous/Async_await]
      7. Choosing the right approach [/en-US/docs/Learn/JavaScript/Asynchronous/Choosing_the_right_approach]

 17. Client-side web APIs
      1. Client-side web APIs [/en-US/docs/Learn/JavaScript/Client-side_web_APIs]
      2. Introduction to web APIs [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction]
      3. Manipulating documents [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents]
      4. Fetching data from the server [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data]
      5. Third party APIs [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Third_party_APIs]
      6. Drawing graphics [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Drawing_graphics]
      7. Video and audio APIs [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Video_and_audio_APIs]
      8. Client-side storage [/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Client-side_storage]

 18. Web forms ‚Äî Working with user data [/en-US/docs/Learn/Forms]
 19. Core forms learning pathway
      1.  Web forms overview [/en-US/docs/Learn/Forms]
      2.  Your first form [/en-US/docs/Learn/Forms/Your_first_form]
      3.  How to structure a web form [/en-US/docs/Learn/Forms/How_to_structure_a_web_form]
      4.  Basic native form controls [/en-US/docs/Learn/Forms/Basic_native_form_controls]
      5.  The HTML5 input types [/en-US/docs/Learn/Forms/HTML5_input_types]
      6.  Other form controls [/en-US/docs/Learn/Forms/Other_form_controls]
      7.  Styling web forms [/en-US/docs/Learn/Forms/Styling_web_forms]
      8.  Advanced form styling [/en-US/docs/Learn/Forms/Advanced_form_styling]
      9.  UI pseudo-classes [/en-US/docs/Learn/Forms/UI_pseudo-classes]
      10. Client-side form validation [/en-US/docs/Learn/Forms/Form_validation]
      11. Sending form data [/en-US/docs/Learn/Forms/Sending_and_retrieving_form_data]

 20. Advanced forms articles
      1. How to build custom form controls [/en-US/docs/Learn/Forms/How_to_build_custom_form_controls]
      2. Sending forms through JavaScript [/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript]
      3. CSS property compatibility table for form controls [/en-US/docs/Learn/Forms/Property_compatibility_table_for_form_controls]

 21. Accessibility ‚Äî Make the web usable by everyone [/en-US/docs/Learn/Accessibility]
 22. Accessibility guides
      1. Accessibility overview [/en-US/docs/Learn/Accessibility]
      2. What is accessibility? [/en-US/docs/Learn/Accessibility/What_is_accessibility]
      3. HTML: A good basis for accessibility [/en-US/docs/Learn/Accessibility/HTML]
      4. CSS and JavaScript accessibility best practices [/en-US/docs/Learn/Accessibility/CSS_and_JavaScript]
      5. WAI-ARIA basics [/en-US/docs/Learn/Accessibility/WAI-ARIA_basics]
      6. Accessible multimedia [/en-US/docs/Learn/Accessibility/Multimedia]
      7. Mobile accessibility [/en-US/docs/Learn/Accessibility/Mobile]

 23. Accessibility assessment
      1. Assessment: Accessibility troubleshooting [/en-US/docs/Learn/Accessibility/Accessibility_troubleshooting]

 24. Tools and testing [/en-US/docs/Learn/Tools_and_testing]
 25. Client-side web development tools
      1. Client-side web development tools index [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools]
      2. Client-side tooling overview [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Overview]
      3. Command line crash course [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Command_line]
      4. Package management basics [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Package_management]
      5. Introducing a complete toolchain [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Introducing_complete_toolchain]
      6. Deploying our app [/en-US/docs/Learn/Tools_and_testing/Understanding_client-side_tools/Deployment]

 26. Introduction to client-side frameworks
      1. Client-side frameworks overview [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Introduction]
      2. Framework main features [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Main_features]

 27. React
      1. Getting started with React [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started]
      2. Beginning our React todo list [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_todo_list_beginning]
      3. Componentizing our React app [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_components]
      4. React interactivity: Events and state
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_events_state]
      5. React interactivity: Editing, filtering, conditional rendering
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_interactivity_filtering_conditional_rendering]
      6. Accessibility in React [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_accessibility]
      7. React resources [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_resources]

 28. Ember
      1. Getting started with Ember [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_getting_started]
      2. Ember app structure and componentization
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_structure_componentization]
      3. Ember interactivity: Events, classes and state
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_interactivity_events_state]
      4. Ember Interactivity: Footer functionality, conditional rendering
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_conditional_footer]
      5. Routing in Ember [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_routing]
      6. Ember resources and troubleshooting [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Ember_resources]

 29. Vue
      1. Getting started with Vue [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started]
      2. Creating our first Vue component [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_first_component]
      3. Rendering a list of Vue components [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_rendering_lists]
      4. Adding a new todo form: Vue events, methods, and models
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_methods_events_models]
      5. Styling Vue components with CSS [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_styling]
      6. Using Vue computed properties [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_computed_properties]
      7. Vue conditional rendering: editing existing todos
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_conditional_rendering ]
      8. Focus management with Vue refs [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_refs_focus_management]
      9. Vue resources [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_resources]

 30. Svelte
      1. Getting started with Svelte [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_getting_started]
      2. Starting our Svelte Todo list app [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_Todo_list_beginning]
      3. Dynamic behavior in Svelte: working with variables and props
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_variables_props]
      4. Componentizing our Svelte app [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_components]
      5. Advanced Svelte: Reactivity, lifecycle, accessibility
         [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_reactivity_lifecycle_accessibility]
      6. Working with Svelte stores [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_stores]
      7. TypeScript support in Svelte [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_TypeScript ]
      8. Deployment and next steps [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Svelte_deployment_next]

 31. Angular
      1. Getting started with Angular [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_getting_started]
      2. Beginning our Angular todo list app [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_todo_list_beginning]
      3. Styling our Angular app [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_styling]
      4. Creating an item component [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_item_component]
      5. Filtering our to-do items [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_filtering]
      6. Building Angular applications and further resources [/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Angular_building]

 32. Git and GitHub
      1. Git and GitHub overview [/en-US/docs/Learn/Tools_and_testing/GitHub]
      2. Hello World [https://guides.github.com/activities/hello-world/]
      3. Git Handbook [https://guides.github.com/introduction/git-handbook/]
      4. Forking Projects [https://guides.github.com/activities/forking/]
      5. About pull requests [https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests]
      6. Mastering Issues [https://guides.github.com/features/issues/]

 33. Cross browser testing
      1. Cross browser testing overview [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing]
      2. Introduction to cross browser testing [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Introduction]
      3. Strategies for carrying out testing [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Testing_strategies]
      4. Handling common HTML and CSS problems [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/HTML_and_CSS]
      5. Handling common JavaScript problems [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/JavaScript]
      6. Handling common accessibility problems [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Accessibility]
      7. Implementing feature detection [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Feature_detection]
      8. Introduction to automated testing [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Automated_testing]
      9. Setting up your own test automation environment [/en-US/docs/Learn/Tools_and_testing/Cross_browser_testing/Your_own_automation_environment]

 34. Server-side website programming [/en-US/docs/Learn/Server-side]
 35. First steps
      1. First steps overview [/en-US/docs/Learn/Server-side/First_steps]
      2. Introduction to the server-side [/en-US/docs/Learn/Server-side/First_steps/Introduction]
      3. Client-Server overview [/en-US/docs/Learn/Server-side/First_steps/Client-Server_overview]
      4. Server-side web frameworks [/en-US/docs/Learn/Server-side/First_steps/Web_frameworks]
      5. Website security [/en-US/docs/Learn/Server-side/First_steps/Website_security]

 36. Django web framework (Python)
      1.  Django web framework (Python) overview [/en-US/docs/Learn/Server-side/Django]
      2.  Introduction [/en-US/docs/Learn/Server-side/Django/Introduction]
      3.  Setting up a development environment [/en-US/docs/Learn/Server-side/Django/development_environment]
      4.  Tutorial: The Local Library website [/en-US/docs/Learn/Server-side/Django/Tutorial_local_library_website]
      5.  Tutorial Part 2: Creating a skeleton website [/en-US/docs/Learn/Server-side/Django/skeleton_website]
      6.  Tutorial Part 3: Using models [/en-US/docs/Learn/Server-side/Django/Models]
      7.  Tutorial Part 4: Django admin site [/en-US/docs/Learn/Server-side/Django/Admin_site]
      8.  Tutorial Part 5: Creating our home page [/en-US/docs/Learn/Server-side/Django/Home_page]
      9.  Tutorial Part 6: Generic list and detail views [/en-US/docs/Learn/Server-side/Django/Generic_views]
      10. Tutorial Part 7: Sessions framework [/en-US/docs/Learn/Server-side/Django/Sessions]
      11. Tutorial Part 8: User authentication and permissions [/en-US/docs/Learn/Server-side/Django/Authentication]
      12. Tutorial Part 9: Working with forms [/en-US/docs/Learn/Server-side/Django/Forms]
      13. Tutorial Part 10: Testing a Django web application [/en-US/docs/Learn/Server-side/Django/Testing]
      14. Tutorial Part 11: Deploying Django to production [/en-US/docs/Learn/Server-side/Django/Deployment]
      15. Web application security [/en-US/docs/Learn/Server-side/Django/web_application_security]
      16. Assessment: DIY mini blog [/en-US/docs/Learn/Server-side/Django/django_assessment_blog]

 37. Express Web Framework (node.js/JavaScript)
      1.  Express Web Framework (Node.js/JavaScript) overview [/en-US/docs/Learn/Server-side/Express_Nodejs]
      2.  Express/Node introduction [/en-US/docs/Learn/Server-side/Express_Nodejs/Introduction]
      3.  Setting up a Node (Express) development environment [/en-US/docs/Learn/Server-side/Express_Nodejs/development_environment]
      4.  Express tutorial: The Local Library website [/en-US/docs/Learn/Server-side/Express_Nodejs/Tutorial_local_library_website]
      5.  Express Tutorial Part 2: Creating a skeleton website [/en-US/docs/Learn/Server-side/Express_Nodejs/skeleton_website]
      6.  Express Tutorial Part 3: Using a database (with Mongoose) [/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose]
      7.  Express Tutorial Part 4: Routes and controllers [/en-US/docs/Learn/Server-side/Express_Nodejs/routes]
      8.  Express Tutorial Part 5: Displaying library data [/en-US/docs/Learn/Server-side/Express_Nodejs/Displaying_data]
      9.  Express Tutorial Part 6: Working with forms [/en-US/docs/Learn/Server-side/Express_Nodejs/forms]
      10. Express Tutorial Part 7: Deploying to production [/en-US/docs/Learn/Server-side/Express_Nodejs/deployment]

 38. Further resources
 39. Common questions
      1. HTML questions [/en-US/docs/Learn/HTML/Howto]
      2. CSS questions [/en-US/docs/Learn/CSS/Howto]
      3. JavaScript questions [/en-US/docs/Learn/JavaScript/Howto]
      4. Web mechanics [/en-US/docs/Learn/Common_questions#Web_mechanics]
      5. Tools and setup [/en-US/docs/Learn/Common_questions#Tools_and_setup]
      6. Design and accessibility [/en-US/docs/Learn/Common_questions#Design_and_accessibility]

/en-US/
 * Web Technologies [/en-US/docs/Web]
 * Learn Web Development [/en-US/docs/Learn]
 * About MDN [/en-US/docs/MDN/About]
 * Feedback [/en-US/docs/MDN/Feedback]

 * About [https://www.mozilla.org/about/]
 * MDN Web Docs Store [https://shop.spreadshirt.com/mdn-store/]
 * Contact Us [https://www.mozilla.org/contact/]
 * Firefox [https://www.mozilla.org/firefox/?utm_source=developer.mozilla.org&utm_campaign=footer&utm_medium=referral]

MDN

 * MDN on Twitter [https://twitter.com/mozdevnet]
 * MDN on Github [https://github.com/mdn/]

MOZILLA

 * Mozilla on Twitter [https://twitter.com/mozilla]
 * Mozilla on Instagram [https://www.instagram.com/mozillagram/]

¬© 2005-2021 Mozilla and individual contributors. Content is available under these licenses [/docs/MDN/About#Copyrights_and_licenses].

 * Terms [https://www.mozilla.org/about/legal/terms/mozilla]
 * Privacy [https://www.mozilla.org/privacy/websites/]
 * Cookies [https://www.mozilla.org/privacy/websites/#cookies]

